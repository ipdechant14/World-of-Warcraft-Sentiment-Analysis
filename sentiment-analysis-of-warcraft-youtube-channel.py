{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10447351,"sourceType":"datasetVersion","datasetId":4235459}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":" [code]","metadata":{"_uuid":"36068c0e-6c7a-414f-9fb4-3a956268a63b","_cell_guid":"f13bb738-3fa8-4156-b9cb-9fc6750a834a","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import re\nimport pandas as pd\nfrom collections import Counter\nfrom tqdm import tqdm\nfrom symspellpy import SymSpell, Verbosity  # <-- Import SymSpell here\n\n\n# List available files\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Load the dataset\nfile_path = '/kaggle/input/wow-classic-gamer-jargon-and-terms-dataset/wow_comments.csv'\ndf = pd.read_csv(file_path, sep=',')\nprint(df.head())\n\ntqdm.pandas()","metadata":{"_uuid":"f30d0a69-ecf5-4248-b128-603798fbb467","_cell_guid":"ead45116-a7d0-4d03-880c-379b14a40012","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-01-28T14:39:38.865239Z","iopub.execute_input":"2025-01-28T14:39:38.865648Z","iopub.status.idle":"2025-01-28T14:39:39.481921Z","shell.execute_reply.started":"2025-01-28T14:39:38.865618Z","shell.execute_reply":"2025-01-28T14:39:39.480863Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Check word frequency (you already have this):\nword_freq = Counter(\" \".join(df['textOriginal']).split())\nprint(word_freq.most_common(100))\n\n# Initialize SymSpell\nsym_spell = SymSpell(max_dictionary_edit_distance=2)\n\n# Load dictionaries\nsym_spell.load_dictionary('/kaggle/input/symspell-dictionaries/frequency_dictionary_en_82_765.txt',\n                          term_index=0,\n                          count_index=1)\nsym_spell.load_bigram_dictionary('/kaggle/input/symspell-dictionaries/bigram_dictionary_en_243_342.txt',\n                                 term_index=0,\n                                 count_index=1)\n\n# Add domain-specific words\ncustom_words = [\n    'Sylvanas', 'Arthas', 'Blizzard', 'Horde', 'Alliance', 'Shadowlands',\n    'Dragonflight', 'Wrath', 'Warcraft', 'Illidan', 'Thrall', 'Jaina', \n    'Anduin', 'Bolvar', 'tank', 'healer', 'dps', 'raid', 'mythic', 'dungeon',\n    'Stormwind', 'Icecrown', 'Dalaran', 'loot', 'tier', 'gear', 'dot', 'aoe',\n    'waycrest', 'Argus', 'fun', 'boring', 'challenging', 'amazing'\n]\nfor word in custom_words:\n    sym_spell.create_dictionary_entry(word.lower(), 1)\n\ndef clean_text(text):\n    text = text.lower()  # Convert to lowercase\n    text = re.sub(r'(?<=\\w)\\s(?=\\w)', '', text)  # Remove spaces between letters\n    text = re.sub(r'[^\\w\\s-]', '', text)  # Remove non-alphanumeric characters\n    text = \" \".join(text.split())  # Normalize whitespace\n    return text\n\ndef remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                               u\"\\U0001F600-\\U0001F64F\"\n                               u\"\\U0001F300-\\U0001F5FF\"\n                               u\"\\U0001F680-\\U0001F6FF\"\n                               u\"\\U0001F1E0-\\U0001F1FF\"\n                               u\"\\U00002702-\\U000027B0\"\n                               u\"\\U000024C2-\\U0001F251\"\n                               \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)\n\ndef fix_spacing(text):\n    text = re.sub(r'\\b\\w\\b\\s?', '', text)  # Remove single characters with spaces\n    return text\n\ndef correct_with_symspell(text):\n    suggestions = sym_spell.lookup_compound(text, max_edit_distance=2)\n    return suggestions[0].term if suggestions else text\n\n# Apply the cleaning pipeline\ndf['newComments'] = df['textOriginal'].progress_apply(clean_text)\ndf['newComments'] = df['newComments'].progress_apply(remove_emoji)\ndf['newComments'] = df['newComments'].progress_apply(fix_spacing)\ndf['newComments'] = df['newComments'].progress_apply(correct_with_symspell)\n\n# Save final results\ndf[['textOriginal', 'newComments']].to_csv('cleaned_comments_final.csv', index=False)\nprint('Cleaning completed and saved to \"cleaned_comments_final.csv\".')","metadata":{"_uuid":"b8cf44f1-4b2e-4719-b3cb-2ead8524482c","_cell_guid":"6cce65a9-9075-4aec-bdca-951a61d511e7","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-01-28T14:39:42.796314Z","iopub.execute_input":"2025-01-28T14:39:42.796768Z","iopub.status.idle":"2025-01-28T14:39:43.307367Z","shell.execute_reply.started":"2025-01-28T14:39:42.796725Z","shell.execute_reply":"2025-01-28T14:39:43.306048Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}